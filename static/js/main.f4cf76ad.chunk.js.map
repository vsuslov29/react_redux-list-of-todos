{"version":3,"sources":["store/index.ts","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["START_LOADING","FINISH_LOADING","SET_TODOS","SET_SELECTED_USER_ID","SET_HAS_LOADING_ERROR","SET_SELECTED_TODO_ID","finishLoading","message","type","setSelectedUserId","selectedUserId","setHasLoadingError","hasLoadingError","isLoading","state","loading","getMessage","getSelectedUserId","getHasLoadingError","getSelectedTodoId","selectedTodoId","initialState","todos","store","createStore","action","composeWithDevTools","TodoList","useState","searchInput","setSearchInput","todosFilter","setTodosFilter","useSelector","filter","todo","title","includes","isCompleted","completed","getTodos","dispatch","useDispatch","onButtonClick","id","userId","setSelectedTodoId","className","onChange","event","target","value","map","isTodoSelected","classNames","htmlFor","readOnly","onClick","request","endpoint","fetch","then","response","json","defaultUser","name","email","phone","CurrentUser","user","setUser","setIsLoading","useEffect","getUser","currentUser","error","currentUserContent","App","todoList","sidebarContent","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4cf76ad.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_TODOS = 'SET_TODOS';\nconst SET_SELECTED_USER_ID = 'SET_SELECTED_USER_ID';\nconst SET_HAS_LOADING_ERROR = 'SET_HAS_LOADING_ERROR';\nconst SET_SELECTED_TODO_ID = 'SET_SELECTED_TODO_ID';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({\n  type: FINISH_LOADING,\n  message,\n});\nexport const setTodos = (todos: Todo[]) => ({\n  type: SET_TODOS,\n  todos,\n});\nexport const setSelectedUserId = (selectedUserId: number) => ({\n  type: SET_SELECTED_USER_ID,\n  selectedUserId,\n});\nexport const setHasLoadingError = (hasLoadingError: boolean) => ({\n  type: SET_HAS_LOADING_ERROR,\n  hasLoadingError,\n});\nexport const setSelectedTodoId = (selectedTodoId: number) => ({\n  type: SET_SELECTED_TODO_ID,\n  selectedTodoId,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (\n  searchInput: string,\n  todosFilter: string,\n) => {\n  return (state: RootState): Todo[] => {\n    const { todos } = state;\n\n    return todos\n      .filter(todo => todo.title.includes(searchInput))\n      .filter(todo => {\n        const isCompleted = todo.completed;\n\n        switch (todosFilter) {\n          case 'active':\n            return !isCompleted;\n          case 'completed':\n            return isCompleted;\n          default:\n            return true;\n        }\n      });\n  };\n};\n\nexport const getSelectedUserId = (state: RootState) => (\n  state.selectedUserId\n);\nexport const getHasLoadingError = (state: RootState) => (\n  state.hasLoadingError\n);\nexport const getSelectedTodoId = (state: RootState) => (\n  state.selectedTodoId\n);\n\n// Initial state\nexport type RootState = {\n  todos: Todo[],\n  loading: boolean;\n  message: string;\n  selectedUserId: number,\n  hasLoadingError: boolean,\n  selectedTodoId: number,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  message: '',\n  selectedUserId: 0,\n  hasLoadingError: false,\n  selectedTodoId: 0,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SET_SELECTED_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.selectedUserId,\n      };\n\n    case SET_HAS_LOADING_ERROR:\n      return {\n        ...state,\n        hasLoadingError: action.hasLoadingError,\n      };\n\n    case SET_SELECTED_TODO_ID:\n      return {\n        ...state,\n        selectedTodoId: action.selectedTodoId,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getSelectedTodoId,\n  getTodos,\n  setSelectedTodoId,\n  setSelectedUserId,\n} from '../../store';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [searchInput, setSearchInput] = useState('');\n  const [todosFilter, setTodosFilter] = useState('all');\n\n  const selectedTodoId = useSelector(getSelectedTodoId);\n  const todos = useSelector(getTodos(searchInput, todosFilter));\n  const dispatch = useDispatch();\n\n  const onButtonClick = (id: number, userId: number) => {\n    dispatch(setSelectedUserId(userId));\n    dispatch(setSelectedTodoId(id));\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchInput(event.target.value);\n  };\n\n  const onSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodosFilter(event.target.value);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          onChange={onInputChange}\n          value={searchInput}\n        />\n\n        <select\n          value={todosFilter}\n          onChange={onSelectChange}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => {\n            const {\n              title,\n              id,\n              completed,\n              userId,\n            } = todo;\n            const isTodoSelected = selectedTodoId === id;\n\n            return (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': completed,\n                    'TodoList__item--unchecked': !completed,\n                  },\n                )}\n                key={id}\n              >\n                <label htmlFor=\"checkbox\">\n                  <input\n                    id=\"checkbox\"\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected': isTodoSelected,\n                    },\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => onButtonClick(id, userId)}\n                >\n                  User&nbsp;#\n                  {userId}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const request = (\n  endpoint: string,\n) => {\n  return fetch(`https://mate.academy/students-api/${endpoint}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => request('todos');\n\nexport const getUser = (userId: number) => request(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setSelectedUserId } from '../../store';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n};\n\ninterface User {\n  name: string,\n  email: string,\n  phone: string,\n}\n\nconst defaultUser = {\n  name: '-',\n  email: '-',\n  phone: '-',\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n}) => {\n  const [user, setUser] = useState<User>(defaultUser);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setHasLoadingError(false);\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(currentUser => {\n        if (!currentUser.error) {\n          setUser(currentUser);\n        } else {\n          setHasLoadingError(true);\n        }\n\n        setIsLoading(false);\n      });\n  }, [userId]);\n\n  const { name, email, phone } = user;\n  const currentUserContent = hasLoadingError ? 'Some error...'\n    : (\n      <>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => dispatch(setSelectedUserId(0))}\n          className=\"button\"\n        >\n          Clear\n        </button>\n      </>\n    );\n\n  return (\n    <div className=\"CurrentUser\">\n      {isLoading ? 'Loading...' : currentUserContent}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport {\n  isLoading,\n  getMessage,\n  startLoading,\n  finishLoading,\n  setTodos,\n  getSelectedUserId,\n  getHasLoadingError,\n  setHasLoadingError,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const hasLoadingError = useSelector(getHasLoadingError);\n\n  useEffect(() => {\n    dispatch(setHasLoadingError(false));\n    dispatch(startLoading());\n\n    getTodos()\n      .then(todoList => {\n        let action;\n\n        if (!todoList.error) {\n          dispatch(setTodos(todoList));\n          action = finishLoading('Success!');\n        } else {\n          dispatch(setHasLoadingError(true));\n          action = finishLoading('Error!');\n        }\n\n        dispatch(action);\n      });\n  }, []);\n\n  const sidebarContent = hasLoadingError\n    ? (\n      <h2>{message}</h2>\n    )\n    : (\n      <div className=\"App__sidebar\">\n        <h2>{message}</h2>\n\n        <TodoList />\n      </div>\n    );\n\n  return (\n    <div className=\"App\">\n\n      {loading\n        ? 'Loading'\n        : sidebarContent}\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}